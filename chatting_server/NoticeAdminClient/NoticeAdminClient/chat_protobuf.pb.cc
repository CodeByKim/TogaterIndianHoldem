// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_protobuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat_server {

namespace {

const ::google::protobuf::Descriptor* packet_verify_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_verify_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_verify_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_verify_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_logout_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_logout_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_logout_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_logout_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_enter_match_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_enter_match_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_leave_match_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_leave_match_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_chat_normal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_chat_normal_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_chat_whisper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_chat_whisper_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_chat_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_chat_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_chat_notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_chat_notice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_5fprotobuf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_5fprotobuf_2eproto() {
  protobuf_AddDesc_chat_5fprotobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat_protobuf.proto");
  GOOGLE_CHECK(file != NULL);
  packet_verify_req_descriptor_ = file->message_type(0);
  static const int packet_verify_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_req, key_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_req, value_user_id_),
  };
  packet_verify_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_verify_req_descriptor_,
      packet_verify_req::internal_default_instance(),
      packet_verify_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_verify_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_req, _internal_metadata_));
  packet_verify_ans_descriptor_ = file->message_type(1);
  static const int packet_verify_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_ans, is_successful_),
  };
  packet_verify_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_verify_ans_descriptor_,
      packet_verify_ans::internal_default_instance(),
      packet_verify_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_verify_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_verify_ans, _internal_metadata_));
  packet_logout_req_descriptor_ = file->message_type(2);
  static const int packet_logout_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, user_id_),
  };
  packet_logout_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_logout_req_descriptor_,
      packet_logout_req::internal_default_instance(),
      packet_logout_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_logout_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_req, _internal_metadata_));
  packet_logout_ans_descriptor_ = file->message_type(3);
  static const int packet_logout_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, is_successful_),
  };
  packet_logout_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_logout_ans_descriptor_,
      packet_logout_ans::internal_default_instance(),
      packet_logout_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_logout_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_logout_ans, _internal_metadata_));
  packet_enter_match_ntf_descriptor_ = file->message_type(4);
  static const int packet_enter_match_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_match_ntf, opponent_id_),
  };
  packet_enter_match_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_enter_match_ntf_descriptor_,
      packet_enter_match_ntf::internal_default_instance(),
      packet_enter_match_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_match_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_enter_match_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_match_ntf, _internal_metadata_));
  packet_leave_match_ntf_descriptor_ = file->message_type(5);
  static const int packet_leave_match_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_leave_match_ntf, do_not_use_),
  };
  packet_leave_match_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_leave_match_ntf_descriptor_,
      packet_leave_match_ntf::internal_default_instance(),
      packet_leave_match_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_leave_match_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_leave_match_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_leave_match_ntf, _internal_metadata_));
  packet_chat_normal_descriptor_ = file->message_type(6);
  static const int packet_chat_normal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_normal, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_normal, chat_message_),
  };
  packet_chat_normal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_chat_normal_descriptor_,
      packet_chat_normal::internal_default_instance(),
      packet_chat_normal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_normal, _has_bits_),
      -1,
      -1,
      sizeof(packet_chat_normal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_normal, _internal_metadata_));
  packet_chat_whisper_descriptor_ = file->message_type(7);
  static const int packet_chat_whisper_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_whisper, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_whisper, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_whisper, chat_message_),
  };
  packet_chat_whisper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_chat_whisper_descriptor_,
      packet_chat_whisper::internal_default_instance(),
      packet_chat_whisper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_whisper, _has_bits_),
      -1,
      -1,
      sizeof(packet_chat_whisper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_whisper, _internal_metadata_));
  packet_chat_room_descriptor_ = file->message_type(8);
  static const int packet_chat_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_room, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_room, chat_message_),
  };
  packet_chat_room_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_chat_room_descriptor_,
      packet_chat_room::internal_default_instance(),
      packet_chat_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_room, _has_bits_),
      -1,
      -1,
      sizeof(packet_chat_room),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_room, _internal_metadata_));
  packet_chat_notice_descriptor_ = file->message_type(9);
  static const int packet_chat_notice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_notice, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_notice, chat_message_),
  };
  packet_chat_notice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_chat_notice_descriptor_,
      packet_chat_notice::internal_default_instance(),
      packet_chat_notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_notice, _has_bits_),
      -1,
      -1,
      sizeof(packet_chat_notice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_chat_notice, _internal_metadata_));
  message_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_5fprotobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_verify_req_descriptor_, packet_verify_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_verify_ans_descriptor_, packet_verify_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_logout_req_descriptor_, packet_logout_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_logout_ans_descriptor_, packet_logout_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_enter_match_ntf_descriptor_, packet_enter_match_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_leave_match_ntf_descriptor_, packet_leave_match_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_chat_normal_descriptor_, packet_chat_normal::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_chat_whisper_descriptor_, packet_chat_whisper::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_chat_room_descriptor_, packet_chat_room::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_chat_notice_descriptor_, packet_chat_notice::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_5fprotobuf_2eproto() {
  packet_verify_req_default_instance_.Shutdown();
  delete packet_verify_req_reflection_;
  packet_verify_ans_default_instance_.Shutdown();
  delete packet_verify_ans_reflection_;
  packet_logout_req_default_instance_.Shutdown();
  delete packet_logout_req_reflection_;
  packet_logout_ans_default_instance_.Shutdown();
  delete packet_logout_ans_reflection_;
  packet_enter_match_ntf_default_instance_.Shutdown();
  delete packet_enter_match_ntf_reflection_;
  packet_leave_match_ntf_default_instance_.Shutdown();
  delete packet_leave_match_ntf_reflection_;
  packet_chat_normal_default_instance_.Shutdown();
  delete packet_chat_normal_reflection_;
  packet_chat_whisper_default_instance_.Shutdown();
  delete packet_chat_whisper_reflection_;
  packet_chat_room_default_instance_.Shutdown();
  delete packet_chat_room_reflection_;
  packet_chat_notice_default_instance_.Shutdown();
  delete packet_chat_notice_reflection_;
}

void protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  packet_verify_req_default_instance_.DefaultConstruct();
  packet_verify_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_logout_req_default_instance_.DefaultConstruct();
  packet_logout_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_enter_match_ntf_default_instance_.DefaultConstruct();
  packet_leave_match_ntf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_chat_normal_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_chat_whisper_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_chat_room_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_chat_notice_default_instance_.DefaultConstruct();
  packet_verify_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_verify_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_logout_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_logout_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_enter_match_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_leave_match_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_chat_normal_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_chat_whisper_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_chat_room_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_chat_notice_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_chat_5fprotobuf_2eproto_once_);
void protobuf_InitDefaults_chat_5fprotobuf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_chat_5fprotobuf_2eproto_once_,
                 &protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl);
}
void protobuf_AddDesc_chat_5fprotobuf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023chat_protobuf.proto\022\013chat_server\">\n\021pa"
    "cket_verify_req\022\022\n\nkey_string\030\001 \002(\t\022\025\n\rv"
    "alue_user_id\030\002 \002(\t\"*\n\021packet_verify_ans\022"
    "\025\n\ris_successful\030\001 \002(\010\"$\n\021packet_logout_"
    "req\022\017\n\007user_id\030\001 \002(\t\"*\n\021packet_logout_an"
    "s\022\025\n\ris_successful\030\001 \002(\010\"-\n\026packet_enter"
    "_match_ntf\022\023\n\013opponent_id\030\001 \002(\t\",\n\026packe"
    "t_leave_match_ntf\022\022\n\ndo_not_use\030\001 \001(\010\";\n"
    "\022packet_chat_normal\022\017\n\007user_id\030\001 \002(\t\022\024\n\014"
    "chat_message\030\002 \002(\t\"O\n\023packet_chat_whispe"
    "r\022\017\n\007user_id\030\001 \002(\t\022\021\n\ttarget_id\030\002 \002(\t\022\024\n"
    "\014chat_message\030\003 \002(\t\"9\n\020packet_chat_room\022"
    "\017\n\007user_id\030\001 \002(\t\022\024\n\014chat_message\030\002 \002(\t\";"
    "\n\022packet_chat_notice\022\017\n\007user_id\030\001 \002(\t\022\024\n"
    "\014chat_message\030\002 \002(\t*\247\001\n\014message_type\022\016\n\n"
    "VERIFY_REQ\020\000\022\016\n\nVERIFY_ANS\020\001\022\016\n\nLOGOUT_R"
    "EQ\020\002\022\016\n\nLOGOUT_ANS\020\003\022\023\n\017ENTER_MATCH_NTF\020"
    "\n\022\023\n\017LEAVE_MATCH_NTF\020\013\022\n\n\006NORMAL\020\024\022\013\n\007WH"
    "ISPER\020\025\022\010\n\004ROOM\020\026\022\n\n\006NOTICE\020\027", 749);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat_protobuf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_5fprotobuf_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chat_5fprotobuf_2eproto_once_);
void protobuf_AddDesc_chat_5fprotobuf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chat_5fprotobuf_2eproto_once_,
                 &protobuf_AddDesc_chat_5fprotobuf_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_5fprotobuf_2eproto {
  StaticDescriptorInitializer_chat_5fprotobuf_2eproto() {
    protobuf_AddDesc_chat_5fprotobuf_2eproto();
  }
} static_descriptor_initializer_chat_5fprotobuf_2eproto_;
const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_verify_req::kKeyStringFieldNumber;
const int packet_verify_req::kValueUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_verify_req::packet_verify_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_verify_req)
}

void packet_verify_req::InitAsDefaultInstance() {
}

packet_verify_req::packet_verify_req(const packet_verify_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_verify_req)
}

void packet_verify_req::SharedCtor() {
  _cached_size_ = 0;
  key_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_verify_req::~packet_verify_req() {
  // @@protoc_insertion_point(destructor:chat_server.packet_verify_req)
  SharedDtor();
}

void packet_verify_req::SharedDtor() {
  key_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_verify_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_verify_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_verify_req_descriptor_;
}

const packet_verify_req& packet_verify_req::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_verify_req> packet_verify_req_default_instance_;

packet_verify_req* packet_verify_req::New(::google::protobuf::Arena* arena) const {
  packet_verify_req* n = new packet_verify_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_verify_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_verify_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key_string()) {
      key_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value_user_id()) {
      value_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_verify_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_verify_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_string().data(), this->key_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_verify_req.key_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value_user_id;
        break;
      }

      // required string value_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_value_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_user_id().data(), this->value_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_verify_req.value_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_verify_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_verify_req)
  return false;
#undef DO_
}

void packet_verify_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_verify_req)
  // required string key_string = 1;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_verify_req.key_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_string(), output);
  }

  // required string value_user_id = 2;
  if (has_value_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_user_id().data(), this->value_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_verify_req.value_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_verify_req)
}

::google::protobuf::uint8* packet_verify_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_verify_req)
  // required string key_string = 1;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_verify_req.key_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_string(), target);
  }

  // required string value_user_id = 2;
  if (has_value_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_user_id().data(), this->value_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_verify_req.value_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_verify_req)
  return target;
}

size_t packet_verify_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_server.packet_verify_req)
  size_t total_size = 0;

  if (has_key_string()) {
    // required string key_string = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_string());
  }

  if (has_value_user_id()) {
    // required string value_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value_user_id());
  }

  return total_size;
}
size_t packet_verify_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_verify_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key_string = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_string());

    // required string value_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_verify_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_verify_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_verify_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_verify_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_verify_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_verify_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_verify_req::MergeFrom(const packet_verify_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_verify_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_verify_req::UnsafeMergeFrom(const packet_verify_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_string()) {
      set_has_key_string();
      key_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_string_);
    }
    if (from.has_value_user_id()) {
      set_has_value_user_id();
      value_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_verify_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_verify_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_verify_req::CopyFrom(const packet_verify_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_verify_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_verify_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_verify_req::Swap(packet_verify_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_verify_req::InternalSwap(packet_verify_req* other) {
  key_string_.Swap(&other->key_string_);
  value_user_id_.Swap(&other->value_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_verify_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_verify_req_descriptor_;
  metadata.reflection = packet_verify_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_verify_req

// required string key_string = 1;
bool packet_verify_req::has_key_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_verify_req::set_has_key_string() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_verify_req::clear_has_key_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_verify_req::clear_key_string() {
  key_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_string();
}
const ::std::string& packet_verify_req::key_string() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_verify_req.key_string)
  return key_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_verify_req::set_key_string(const ::std::string& value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_verify_req.key_string)
}
void packet_verify_req::set_key_string(const char* value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_verify_req.key_string)
}
void packet_verify_req::set_key_string(const char* value, size_t size) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_verify_req.key_string)
}
::std::string* packet_verify_req::mutable_key_string() {
  set_has_key_string();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_verify_req.key_string)
  return key_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_verify_req::release_key_string() {
  // @@protoc_insertion_point(field_release:chat_server.packet_verify_req.key_string)
  clear_has_key_string();
  return key_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_verify_req::set_allocated_key_string(::std::string* key_string) {
  if (key_string != NULL) {
    set_has_key_string();
  } else {
    clear_has_key_string();
  }
  key_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_string);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_verify_req.key_string)
}

// required string value_user_id = 2;
bool packet_verify_req::has_value_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_verify_req::set_has_value_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_verify_req::clear_has_value_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_verify_req::clear_value_user_id() {
  value_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_user_id();
}
const ::std::string& packet_verify_req::value_user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_verify_req.value_user_id)
  return value_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_verify_req::set_value_user_id(const ::std::string& value) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_verify_req.value_user_id)
}
void packet_verify_req::set_value_user_id(const char* value) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_verify_req.value_user_id)
}
void packet_verify_req::set_value_user_id(const char* value, size_t size) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_verify_req.value_user_id)
}
::std::string* packet_verify_req::mutable_value_user_id() {
  set_has_value_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_verify_req.value_user_id)
  return value_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_verify_req::release_value_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_verify_req.value_user_id)
  clear_has_value_user_id();
  return value_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_verify_req::set_allocated_value_user_id(::std::string* value_user_id) {
  if (value_user_id != NULL) {
    set_has_value_user_id();
  } else {
    clear_has_value_user_id();
  }
  value_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_verify_req.value_user_id)
}

inline const packet_verify_req* packet_verify_req::internal_default_instance() {
  return &packet_verify_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_verify_ans::kIsSuccessfulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_verify_ans::packet_verify_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_verify_ans)
}

void packet_verify_ans::InitAsDefaultInstance() {
}

packet_verify_ans::packet_verify_ans(const packet_verify_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_verify_ans)
}

void packet_verify_ans::SharedCtor() {
  _cached_size_ = 0;
  is_successful_ = false;
}

packet_verify_ans::~packet_verify_ans() {
  // @@protoc_insertion_point(destructor:chat_server.packet_verify_ans)
  SharedDtor();
}

void packet_verify_ans::SharedDtor() {
}

void packet_verify_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_verify_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_verify_ans_descriptor_;
}

const packet_verify_ans& packet_verify_ans::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_verify_ans> packet_verify_ans_default_instance_;

packet_verify_ans* packet_verify_ans::New(::google::protobuf::Arena* arena) const {
  packet_verify_ans* n = new packet_verify_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_verify_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_verify_ans)
  is_successful_ = false;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_verify_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_verify_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_successful = 1;
      case 1: {
        if (tag == 8) {
          set_has_is_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_successful_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_verify_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_verify_ans)
  return false;
#undef DO_
}

void packet_verify_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_verify_ans)
  // required bool is_successful = 1;
  if (has_is_successful()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_successful(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_verify_ans)
}

::google::protobuf::uint8* packet_verify_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_verify_ans)
  // required bool is_successful = 1;
  if (has_is_successful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_successful(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_verify_ans)
  return target;
}

size_t packet_verify_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_verify_ans)
  size_t total_size = 0;

  // required bool is_successful = 1;
  if (has_is_successful()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_verify_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_verify_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_verify_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_verify_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_verify_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_verify_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_verify_ans::MergeFrom(const packet_verify_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_verify_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_verify_ans::UnsafeMergeFrom(const packet_verify_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_successful()) {
      set_is_successful(from.is_successful());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_verify_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_verify_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_verify_ans::CopyFrom(const packet_verify_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_verify_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_verify_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_verify_ans::Swap(packet_verify_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_verify_ans::InternalSwap(packet_verify_ans* other) {
  std::swap(is_successful_, other->is_successful_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_verify_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_verify_ans_descriptor_;
  metadata.reflection = packet_verify_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_verify_ans

// required bool is_successful = 1;
bool packet_verify_ans::has_is_successful() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_verify_ans::set_has_is_successful() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_verify_ans::clear_has_is_successful() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_verify_ans::clear_is_successful() {
  is_successful_ = false;
  clear_has_is_successful();
}
bool packet_verify_ans::is_successful() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_verify_ans.is_successful)
  return is_successful_;
}
void packet_verify_ans::set_is_successful(bool value) {
  set_has_is_successful();
  is_successful_ = value;
  // @@protoc_insertion_point(field_set:chat_server.packet_verify_ans.is_successful)
}

inline const packet_verify_ans* packet_verify_ans::internal_default_instance() {
  return &packet_verify_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_logout_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_logout_req::packet_logout_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_logout_req)
}

void packet_logout_req::InitAsDefaultInstance() {
}

packet_logout_req::packet_logout_req(const packet_logout_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_logout_req)
}

void packet_logout_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_logout_req::~packet_logout_req() {
  // @@protoc_insertion_point(destructor:chat_server.packet_logout_req)
  SharedDtor();
}

void packet_logout_req::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_logout_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_logout_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_logout_req_descriptor_;
}

const packet_logout_req& packet_logout_req::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_logout_req> packet_logout_req_default_instance_;

packet_logout_req* packet_logout_req::New(::google::protobuf::Arena* arena) const {
  packet_logout_req* n = new packet_logout_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_logout_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_logout_req)
  if (has_user_id()) {
    user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_logout_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_logout_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_logout_req.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_logout_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_logout_req)
  return false;
#undef DO_
}

void packet_logout_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_logout_req)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_logout_req.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_logout_req)
}

::google::protobuf::uint8* packet_logout_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_logout_req)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_logout_req.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_logout_req)
  return target;
}

size_t packet_logout_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_logout_req)
  size_t total_size = 0;

  // required string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_logout_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_logout_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_logout_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_logout_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_logout_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_logout_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_logout_req::MergeFrom(const packet_logout_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_logout_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_logout_req::UnsafeMergeFrom(const packet_logout_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_logout_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_logout_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_logout_req::CopyFrom(const packet_logout_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_logout_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_logout_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_logout_req::Swap(packet_logout_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_logout_req::InternalSwap(packet_logout_req* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_logout_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_logout_req_descriptor_;
  metadata.reflection = packet_logout_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_logout_req

// required string user_id = 1;
bool packet_logout_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_logout_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_logout_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_logout_req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& packet_logout_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_logout_req.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_logout_req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_logout_req.user_id)
}
void packet_logout_req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_logout_req.user_id)
}
void packet_logout_req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_logout_req.user_id)
}
::std::string* packet_logout_req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_logout_req.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_logout_req::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_logout_req.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_logout_req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_logout_req.user_id)
}

inline const packet_logout_req* packet_logout_req::internal_default_instance() {
  return &packet_logout_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_logout_ans::kIsSuccessfulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_logout_ans::packet_logout_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_logout_ans)
}

void packet_logout_ans::InitAsDefaultInstance() {
}

packet_logout_ans::packet_logout_ans(const packet_logout_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_logout_ans)
}

void packet_logout_ans::SharedCtor() {
  _cached_size_ = 0;
  is_successful_ = false;
}

packet_logout_ans::~packet_logout_ans() {
  // @@protoc_insertion_point(destructor:chat_server.packet_logout_ans)
  SharedDtor();
}

void packet_logout_ans::SharedDtor() {
}

void packet_logout_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_logout_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_logout_ans_descriptor_;
}

const packet_logout_ans& packet_logout_ans::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_logout_ans> packet_logout_ans_default_instance_;

packet_logout_ans* packet_logout_ans::New(::google::protobuf::Arena* arena) const {
  packet_logout_ans* n = new packet_logout_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_logout_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_logout_ans)
  is_successful_ = false;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_logout_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_logout_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_successful = 1;
      case 1: {
        if (tag == 8) {
          set_has_is_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_successful_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_logout_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_logout_ans)
  return false;
#undef DO_
}

void packet_logout_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_logout_ans)
  // required bool is_successful = 1;
  if (has_is_successful()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_successful(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_logout_ans)
}

::google::protobuf::uint8* packet_logout_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_logout_ans)
  // required bool is_successful = 1;
  if (has_is_successful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_successful(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_logout_ans)
  return target;
}

size_t packet_logout_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_logout_ans)
  size_t total_size = 0;

  // required bool is_successful = 1;
  if (has_is_successful()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_logout_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_logout_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_logout_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_logout_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_logout_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_logout_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_logout_ans::MergeFrom(const packet_logout_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_logout_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_logout_ans::UnsafeMergeFrom(const packet_logout_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_successful()) {
      set_is_successful(from.is_successful());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_logout_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_logout_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_logout_ans::CopyFrom(const packet_logout_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_logout_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_logout_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_logout_ans::Swap(packet_logout_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_logout_ans::InternalSwap(packet_logout_ans* other) {
  std::swap(is_successful_, other->is_successful_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_logout_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_logout_ans_descriptor_;
  metadata.reflection = packet_logout_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_logout_ans

// required bool is_successful = 1;
bool packet_logout_ans::has_is_successful() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_logout_ans::set_has_is_successful() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_logout_ans::clear_has_is_successful() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_logout_ans::clear_is_successful() {
  is_successful_ = false;
  clear_has_is_successful();
}
bool packet_logout_ans::is_successful() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_logout_ans.is_successful)
  return is_successful_;
}
void packet_logout_ans::set_is_successful(bool value) {
  set_has_is_successful();
  is_successful_ = value;
  // @@protoc_insertion_point(field_set:chat_server.packet_logout_ans.is_successful)
}

inline const packet_logout_ans* packet_logout_ans::internal_default_instance() {
  return &packet_logout_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_enter_match_ntf::kOpponentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_enter_match_ntf::packet_enter_match_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_enter_match_ntf)
}

void packet_enter_match_ntf::InitAsDefaultInstance() {
}

packet_enter_match_ntf::packet_enter_match_ntf(const packet_enter_match_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_enter_match_ntf)
}

void packet_enter_match_ntf::SharedCtor() {
  _cached_size_ = 0;
  opponent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_enter_match_ntf::~packet_enter_match_ntf() {
  // @@protoc_insertion_point(destructor:chat_server.packet_enter_match_ntf)
  SharedDtor();
}

void packet_enter_match_ntf::SharedDtor() {
  opponent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_enter_match_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_enter_match_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_enter_match_ntf_descriptor_;
}

const packet_enter_match_ntf& packet_enter_match_ntf::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_enter_match_ntf> packet_enter_match_ntf_default_instance_;

packet_enter_match_ntf* packet_enter_match_ntf::New(::google::protobuf::Arena* arena) const {
  packet_enter_match_ntf* n = new packet_enter_match_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_enter_match_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_enter_match_ntf)
  if (has_opponent_id()) {
    opponent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_enter_match_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_enter_match_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string opponent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opponent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opponent_id().data(), this->opponent_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_enter_match_ntf.opponent_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_enter_match_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_enter_match_ntf)
  return false;
#undef DO_
}

void packet_enter_match_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_enter_match_ntf)
  // required string opponent_id = 1;
  if (has_opponent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opponent_id().data(), this->opponent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_enter_match_ntf.opponent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->opponent_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_enter_match_ntf)
}

::google::protobuf::uint8* packet_enter_match_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_enter_match_ntf)
  // required string opponent_id = 1;
  if (has_opponent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opponent_id().data(), this->opponent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_enter_match_ntf.opponent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opponent_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_enter_match_ntf)
  return target;
}

size_t packet_enter_match_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_enter_match_ntf)
  size_t total_size = 0;

  // required string opponent_id = 1;
  if (has_opponent_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opponent_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_enter_match_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_enter_match_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_enter_match_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_enter_match_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_enter_match_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_enter_match_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_enter_match_ntf::MergeFrom(const packet_enter_match_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_enter_match_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_enter_match_ntf::UnsafeMergeFrom(const packet_enter_match_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opponent_id()) {
      set_has_opponent_id();
      opponent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opponent_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_enter_match_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_enter_match_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_enter_match_ntf::CopyFrom(const packet_enter_match_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_enter_match_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_enter_match_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_enter_match_ntf::Swap(packet_enter_match_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_enter_match_ntf::InternalSwap(packet_enter_match_ntf* other) {
  opponent_id_.Swap(&other->opponent_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_enter_match_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_enter_match_ntf_descriptor_;
  metadata.reflection = packet_enter_match_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_enter_match_ntf

// required string opponent_id = 1;
bool packet_enter_match_ntf::has_opponent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_enter_match_ntf::set_has_opponent_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_enter_match_ntf::clear_has_opponent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_enter_match_ntf::clear_opponent_id() {
  opponent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opponent_id();
}
const ::std::string& packet_enter_match_ntf::opponent_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_enter_match_ntf.opponent_id)
  return opponent_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_match_ntf::set_opponent_id(const ::std::string& value) {
  set_has_opponent_id();
  opponent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_enter_match_ntf.opponent_id)
}
void packet_enter_match_ntf::set_opponent_id(const char* value) {
  set_has_opponent_id();
  opponent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_enter_match_ntf.opponent_id)
}
void packet_enter_match_ntf::set_opponent_id(const char* value, size_t size) {
  set_has_opponent_id();
  opponent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_enter_match_ntf.opponent_id)
}
::std::string* packet_enter_match_ntf::mutable_opponent_id() {
  set_has_opponent_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_enter_match_ntf.opponent_id)
  return opponent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_enter_match_ntf::release_opponent_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_enter_match_ntf.opponent_id)
  clear_has_opponent_id();
  return opponent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_match_ntf::set_allocated_opponent_id(::std::string* opponent_id) {
  if (opponent_id != NULL) {
    set_has_opponent_id();
  } else {
    clear_has_opponent_id();
  }
  opponent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opponent_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_enter_match_ntf.opponent_id)
}

inline const packet_enter_match_ntf* packet_enter_match_ntf::internal_default_instance() {
  return &packet_enter_match_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_leave_match_ntf::kDoNotUseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_leave_match_ntf::packet_leave_match_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_leave_match_ntf)
}

void packet_leave_match_ntf::InitAsDefaultInstance() {
}

packet_leave_match_ntf::packet_leave_match_ntf(const packet_leave_match_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_leave_match_ntf)
}

void packet_leave_match_ntf::SharedCtor() {
  _cached_size_ = 0;
  do_not_use_ = false;
}

packet_leave_match_ntf::~packet_leave_match_ntf() {
  // @@protoc_insertion_point(destructor:chat_server.packet_leave_match_ntf)
  SharedDtor();
}

void packet_leave_match_ntf::SharedDtor() {
}

void packet_leave_match_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_leave_match_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_leave_match_ntf_descriptor_;
}

const packet_leave_match_ntf& packet_leave_match_ntf::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_leave_match_ntf> packet_leave_match_ntf_default_instance_;

packet_leave_match_ntf* packet_leave_match_ntf::New(::google::protobuf::Arena* arena) const {
  packet_leave_match_ntf* n = new packet_leave_match_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_leave_match_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_leave_match_ntf)
  do_not_use_ = false;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_leave_match_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_leave_match_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool do_not_use = 1;
      case 1: {
        if (tag == 8) {
          set_has_do_not_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_use_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_leave_match_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_leave_match_ntf)
  return false;
#undef DO_
}

void packet_leave_match_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_leave_match_ntf)
  // optional bool do_not_use = 1;
  if (has_do_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->do_not_use(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_leave_match_ntf)
}

::google::protobuf::uint8* packet_leave_match_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_leave_match_ntf)
  // optional bool do_not_use = 1;
  if (has_do_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->do_not_use(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_leave_match_ntf)
  return target;
}

size_t packet_leave_match_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_leave_match_ntf)
  size_t total_size = 0;

  // optional bool do_not_use = 1;
  if (has_do_not_use()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_leave_match_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_leave_match_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_leave_match_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_leave_match_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_leave_match_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_leave_match_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_leave_match_ntf::MergeFrom(const packet_leave_match_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_leave_match_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_leave_match_ntf::UnsafeMergeFrom(const packet_leave_match_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_not_use()) {
      set_do_not_use(from.do_not_use());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_leave_match_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_leave_match_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_leave_match_ntf::CopyFrom(const packet_leave_match_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_leave_match_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_leave_match_ntf::IsInitialized() const {

  return true;
}

void packet_leave_match_ntf::Swap(packet_leave_match_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_leave_match_ntf::InternalSwap(packet_leave_match_ntf* other) {
  std::swap(do_not_use_, other->do_not_use_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_leave_match_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_leave_match_ntf_descriptor_;
  metadata.reflection = packet_leave_match_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_leave_match_ntf

// optional bool do_not_use = 1;
bool packet_leave_match_ntf::has_do_not_use() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_leave_match_ntf::set_has_do_not_use() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_leave_match_ntf::clear_has_do_not_use() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_leave_match_ntf::clear_do_not_use() {
  do_not_use_ = false;
  clear_has_do_not_use();
}
bool packet_leave_match_ntf::do_not_use() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_leave_match_ntf.do_not_use)
  return do_not_use_;
}
void packet_leave_match_ntf::set_do_not_use(bool value) {
  set_has_do_not_use();
  do_not_use_ = value;
  // @@protoc_insertion_point(field_set:chat_server.packet_leave_match_ntf.do_not_use)
}

inline const packet_leave_match_ntf* packet_leave_match_ntf::internal_default_instance() {
  return &packet_leave_match_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_chat_normal::kUserIdFieldNumber;
const int packet_chat_normal::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_chat_normal::packet_chat_normal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_chat_normal)
}

void packet_chat_normal::InitAsDefaultInstance() {
}

packet_chat_normal::packet_chat_normal(const packet_chat_normal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_chat_normal)
}

void packet_chat_normal::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_chat_normal::~packet_chat_normal() {
  // @@protoc_insertion_point(destructor:chat_server.packet_chat_normal)
  SharedDtor();
}

void packet_chat_normal::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_chat_normal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_chat_normal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_chat_normal_descriptor_;
}

const packet_chat_normal& packet_chat_normal::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_chat_normal> packet_chat_normal_default_instance_;

packet_chat_normal* packet_chat_normal::New(::google::protobuf::Arena* arena) const {
  packet_chat_normal* n = new packet_chat_normal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_chat_normal::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_chat_normal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chat_message()) {
      chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_chat_normal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_chat_normal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_normal.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // required string chat_message = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_normal.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_chat_normal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_chat_normal)
  return false;
#undef DO_
}

void packet_chat_normal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_chat_normal)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_normal.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_normal.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_chat_normal)
}

::google::protobuf::uint8* packet_chat_normal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_chat_normal)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_normal.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_normal.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_chat_normal)
  return target;
}

size_t packet_chat_normal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_server.packet_chat_normal)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_chat_message()) {
    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  return total_size;
}
size_t packet_chat_normal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_chat_normal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_chat_normal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_chat_normal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_chat_normal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_chat_normal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_chat_normal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_chat_normal)
    UnsafeMergeFrom(*source);
  }
}

void packet_chat_normal::MergeFrom(const packet_chat_normal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_chat_normal)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_chat_normal::UnsafeMergeFrom(const packet_chat_normal& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_chat_message()) {
      set_has_chat_message();
      chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_chat_normal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_chat_normal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_chat_normal::CopyFrom(const packet_chat_normal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_chat_normal)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_chat_normal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_chat_normal::Swap(packet_chat_normal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_chat_normal::InternalSwap(packet_chat_normal* other) {
  user_id_.Swap(&other->user_id_);
  chat_message_.Swap(&other->chat_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_chat_normal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_chat_normal_descriptor_;
  metadata.reflection = packet_chat_normal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_chat_normal

// required string user_id = 1;
bool packet_chat_normal::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_chat_normal::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_chat_normal::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_chat_normal::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& packet_chat_normal::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_normal.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_normal::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_normal.user_id)
}
void packet_chat_normal::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_normal.user_id)
}
void packet_chat_normal::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_normal.user_id)
}
::std::string* packet_chat_normal::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_normal.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_normal::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_normal.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_normal::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_normal.user_id)
}

// required string chat_message = 2;
bool packet_chat_normal::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_chat_normal::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_chat_normal::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_chat_normal::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
const ::std::string& packet_chat_normal::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_normal.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_normal::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_normal.chat_message)
}
void packet_chat_normal::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_normal.chat_message)
}
void packet_chat_normal::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_normal.chat_message)
}
::std::string* packet_chat_normal::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_normal.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_normal::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_normal.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_normal::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_normal.chat_message)
}

inline const packet_chat_normal* packet_chat_normal::internal_default_instance() {
  return &packet_chat_normal_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_chat_whisper::kUserIdFieldNumber;
const int packet_chat_whisper::kTargetIdFieldNumber;
const int packet_chat_whisper::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_chat_whisper::packet_chat_whisper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_chat_whisper)
}

void packet_chat_whisper::InitAsDefaultInstance() {
}

packet_chat_whisper::packet_chat_whisper(const packet_chat_whisper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_chat_whisper)
}

void packet_chat_whisper::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_chat_whisper::~packet_chat_whisper() {
  // @@protoc_insertion_point(destructor:chat_server.packet_chat_whisper)
  SharedDtor();
}

void packet_chat_whisper::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_chat_whisper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_chat_whisper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_chat_whisper_descriptor_;
}

const packet_chat_whisper& packet_chat_whisper::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_chat_whisper> packet_chat_whisper_default_instance_;

packet_chat_whisper* packet_chat_whisper::New(::google::protobuf::Arena* arena) const {
  packet_chat_whisper* n = new packet_chat_whisper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_chat_whisper::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_chat_whisper)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_target_id()) {
      target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chat_message()) {
      chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_chat_whisper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_chat_whisper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_whisper.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }

      // required string target_id = 2;
      case 2: {
        if (tag == 18) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_id().data(), this->target_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_whisper.target_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat_message;
        break;
      }

      // required string chat_message = 3;
      case 3: {
        if (tag == 26) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_whisper.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_chat_whisper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_chat_whisper)
  return false;
#undef DO_
}

void packet_chat_whisper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_chat_whisper)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_id().data(), this->target_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.target_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target_id(), output);
  }

  // required string chat_message = 3;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chat_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_chat_whisper)
}

::google::protobuf::uint8* packet_chat_whisper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_chat_whisper)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_id().data(), this->target_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.target_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_id(), target);
  }

  // required string chat_message = 3;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_whisper.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_chat_whisper)
  return target;
}

size_t packet_chat_whisper::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_server.packet_chat_whisper)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_target_id()) {
    // required string target_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_id());
  }

  if (has_chat_message()) {
    // required string chat_message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  return total_size;
}
size_t packet_chat_whisper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_chat_whisper)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string target_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_id());

    // required string chat_message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_chat_whisper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_chat_whisper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_chat_whisper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_chat_whisper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_chat_whisper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_chat_whisper)
    UnsafeMergeFrom(*source);
  }
}

void packet_chat_whisper::MergeFrom(const packet_chat_whisper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_chat_whisper)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_chat_whisper::UnsafeMergeFrom(const packet_chat_whisper& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_target_id()) {
      set_has_target_id();
      target_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_id_);
    }
    if (from.has_chat_message()) {
      set_has_chat_message();
      chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_chat_whisper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_chat_whisper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_chat_whisper::CopyFrom(const packet_chat_whisper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_chat_whisper)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_chat_whisper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void packet_chat_whisper::Swap(packet_chat_whisper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_chat_whisper::InternalSwap(packet_chat_whisper* other) {
  user_id_.Swap(&other->user_id_);
  target_id_.Swap(&other->target_id_);
  chat_message_.Swap(&other->chat_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_chat_whisper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_chat_whisper_descriptor_;
  metadata.reflection = packet_chat_whisper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_chat_whisper

// required string user_id = 1;
bool packet_chat_whisper::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_chat_whisper::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_chat_whisper::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_chat_whisper::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& packet_chat_whisper::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.user_id)
}
void packet_chat_whisper::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.user_id)
}
void packet_chat_whisper::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.user_id)
}
::std::string* packet_chat_whisper::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_whisper::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.user_id)
}

// required string target_id = 2;
bool packet_chat_whisper::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_chat_whisper::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_chat_whisper::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_chat_whisper::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_id();
}
const ::std::string& packet_chat_whisper::target_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.target_id)
  return target_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_target_id(const ::std::string& value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.target_id)
}
void packet_chat_whisper::set_target_id(const char* value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.target_id)
}
void packet_chat_whisper::set_target_id(const char* value, size_t size) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.target_id)
}
::std::string* packet_chat_whisper::mutable_target_id() {
  set_has_target_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_whisper::release_target_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.target_id)
  clear_has_target_id();
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.target_id)
}

// required string chat_message = 3;
bool packet_chat_whisper::has_chat_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_chat_whisper::set_has_chat_message() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_chat_whisper::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_chat_whisper::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
const ::std::string& packet_chat_whisper::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.chat_message)
}
void packet_chat_whisper::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.chat_message)
}
void packet_chat_whisper::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.chat_message)
}
::std::string* packet_chat_whisper::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_whisper::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_whisper::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.chat_message)
}

inline const packet_chat_whisper* packet_chat_whisper::internal_default_instance() {
  return &packet_chat_whisper_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_chat_room::kUserIdFieldNumber;
const int packet_chat_room::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_chat_room::packet_chat_room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_chat_room)
}

void packet_chat_room::InitAsDefaultInstance() {
}

packet_chat_room::packet_chat_room(const packet_chat_room& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_chat_room)
}

void packet_chat_room::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_chat_room::~packet_chat_room() {
  // @@protoc_insertion_point(destructor:chat_server.packet_chat_room)
  SharedDtor();
}

void packet_chat_room::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_chat_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_chat_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_chat_room_descriptor_;
}

const packet_chat_room& packet_chat_room::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_chat_room> packet_chat_room_default_instance_;

packet_chat_room* packet_chat_room::New(::google::protobuf::Arena* arena) const {
  packet_chat_room* n = new packet_chat_room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_chat_room::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_chat_room)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chat_message()) {
      chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_chat_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_chat_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_room.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // required string chat_message = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_room.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_chat_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_chat_room)
  return false;
#undef DO_
}

void packet_chat_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_chat_room)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_room.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_room.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_chat_room)
}

::google::protobuf::uint8* packet_chat_room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_chat_room)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_room.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_room.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_chat_room)
  return target;
}

size_t packet_chat_room::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_server.packet_chat_room)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_chat_message()) {
    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  return total_size;
}
size_t packet_chat_room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_chat_room)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_chat_room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_chat_room)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_chat_room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_chat_room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_chat_room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_chat_room)
    UnsafeMergeFrom(*source);
  }
}

void packet_chat_room::MergeFrom(const packet_chat_room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_chat_room)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_chat_room::UnsafeMergeFrom(const packet_chat_room& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_chat_message()) {
      set_has_chat_message();
      chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_chat_room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_chat_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_chat_room::CopyFrom(const packet_chat_room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_chat_room)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_chat_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_chat_room::Swap(packet_chat_room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_chat_room::InternalSwap(packet_chat_room* other) {
  user_id_.Swap(&other->user_id_);
  chat_message_.Swap(&other->chat_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_chat_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_chat_room_descriptor_;
  metadata.reflection = packet_chat_room_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_chat_room

// required string user_id = 1;
bool packet_chat_room::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_chat_room::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_chat_room::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_chat_room::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& packet_chat_room::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_room.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_room::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_room.user_id)
}
void packet_chat_room::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_room.user_id)
}
void packet_chat_room::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_room.user_id)
}
::std::string* packet_chat_room::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_room.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_room::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_room.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_room::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_room.user_id)
}

// required string chat_message = 2;
bool packet_chat_room::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_chat_room::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_chat_room::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_chat_room::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
const ::std::string& packet_chat_room::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_room.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_room::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_room.chat_message)
}
void packet_chat_room::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_room.chat_message)
}
void packet_chat_room::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_room.chat_message)
}
::std::string* packet_chat_room::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_room.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_room::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_room.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_room::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_room.chat_message)
}

inline const packet_chat_room* packet_chat_room::internal_default_instance() {
  return &packet_chat_room_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_chat_notice::kUserIdFieldNumber;
const int packet_chat_notice::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_chat_notice::packet_chat_notice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_server.packet_chat_notice)
}

void packet_chat_notice::InitAsDefaultInstance() {
}

packet_chat_notice::packet_chat_notice(const packet_chat_notice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat_server.packet_chat_notice)
}

void packet_chat_notice::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_chat_notice::~packet_chat_notice() {
  // @@protoc_insertion_point(destructor:chat_server.packet_chat_notice)
  SharedDtor();
}

void packet_chat_notice::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_chat_notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_chat_notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_chat_notice_descriptor_;
}

const packet_chat_notice& packet_chat_notice::default_instance() {
  protobuf_InitDefaults_chat_5fprotobuf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_chat_notice> packet_chat_notice_default_instance_;

packet_chat_notice* packet_chat_notice::New(::google::protobuf::Arena* arena) const {
  packet_chat_notice* n = new packet_chat_notice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_chat_notice::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_server.packet_chat_notice)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chat_message()) {
      chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_chat_notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_server.packet_chat_notice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_notice.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // required string chat_message = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_server.packet_chat_notice.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_server.packet_chat_notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_server.packet_chat_notice)
  return false;
#undef DO_
}

void packet_chat_notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_server.packet_chat_notice)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_notice.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_notice.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_server.packet_chat_notice)
}

::google::protobuf::uint8* packet_chat_notice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_server.packet_chat_notice)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_notice.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_server.packet_chat_notice.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_server.packet_chat_notice)
  return target;
}

size_t packet_chat_notice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_server.packet_chat_notice)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_chat_message()) {
    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  return total_size;
}
size_t packet_chat_notice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_server.packet_chat_notice)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string chat_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_chat_notice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_server.packet_chat_notice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_chat_notice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_chat_notice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_server.packet_chat_notice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_server.packet_chat_notice)
    UnsafeMergeFrom(*source);
  }
}

void packet_chat_notice::MergeFrom(const packet_chat_notice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_server.packet_chat_notice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_chat_notice::UnsafeMergeFrom(const packet_chat_notice& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_chat_message()) {
      set_has_chat_message();
      chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_chat_notice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_server.packet_chat_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_chat_notice::CopyFrom(const packet_chat_notice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_server.packet_chat_notice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_chat_notice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_chat_notice::Swap(packet_chat_notice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_chat_notice::InternalSwap(packet_chat_notice* other) {
  user_id_.Swap(&other->user_id_);
  chat_message_.Swap(&other->chat_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_chat_notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_chat_notice_descriptor_;
  metadata.reflection = packet_chat_notice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_chat_notice

// required string user_id = 1;
bool packet_chat_notice::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_chat_notice::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_chat_notice::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_chat_notice::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& packet_chat_notice::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_notice.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_notice::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_notice.user_id)
}
void packet_chat_notice::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_notice.user_id)
}
void packet_chat_notice::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_notice.user_id)
}
::std::string* packet_chat_notice::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_notice.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_notice::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_notice.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_notice::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_notice.user_id)
}

// required string chat_message = 2;
bool packet_chat_notice::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_chat_notice::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_chat_notice::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_chat_notice::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
const ::std::string& packet_chat_notice::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_notice.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_notice::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_notice.chat_message)
}
void packet_chat_notice::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_notice.chat_message)
}
void packet_chat_notice::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_notice.chat_message)
}
::std::string* packet_chat_notice::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_notice.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_chat_notice::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_notice.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_chat_notice::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_notice.chat_message)
}

inline const packet_chat_notice* packet_chat_notice::internal_default_instance() {
  return &packet_chat_notice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_server

// @@protoc_insertion_point(global_scope)
