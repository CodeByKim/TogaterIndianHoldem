// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logic_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace logic_server {

namespace {

const ::google::protobuf::Descriptor* packet_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_enter_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_enter_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_game_state_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_game_state_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_process_turn_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_process_turn_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_process_turn_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_process_turn_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_process_turn_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_process_turn_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_process_check_card_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_process_check_card_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_disconnect_room_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_disconnect_room_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_echo_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_echo_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* message_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_logic_5fserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_logic_5fserver_2eproto() {
  protobuf_AddDesc_logic_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logic_server.proto");
  GOOGLE_CHECK(file != NULL);
  packet_enter_req_descriptor_ = file->message_type(0);
  static const int packet_enter_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_req, player_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_req, room_key_),
  };
  packet_enter_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_enter_req_descriptor_,
      packet_enter_req::internal_default_instance(),
      packet_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_enter_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_req, _internal_metadata_));
  packet_enter_ans_descriptor_ = file->message_type(1);
  static const int packet_enter_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_ans, result_),
  };
  packet_enter_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_enter_ans_descriptor_,
      packet_enter_ans::internal_default_instance(),
      packet_enter_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_enter_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_enter_ans, _internal_metadata_));
  packet_game_state_ntf_descriptor_ = file->message_type(2);
  static const int packet_game_state_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_game_state_ntf, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_game_state_ntf, win_player_key_),
  };
  packet_game_state_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_game_state_ntf_descriptor_,
      packet_game_state_ntf::internal_default_instance(),
      packet_game_state_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_game_state_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_game_state_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_game_state_ntf, _internal_metadata_));
  packet_process_turn_req_descriptor_ = file->message_type(3);
  static const int packet_process_turn_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_req, my_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_req, opponent_money_),
  };
  packet_process_turn_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_process_turn_req_descriptor_,
      packet_process_turn_req::internal_default_instance(),
      packet_process_turn_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_req, _has_bits_),
      -1,
      -1,
      sizeof(packet_process_turn_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_req, _internal_metadata_));
  packet_process_turn_ans_descriptor_ = file->message_type(4);
  static const int packet_process_turn_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ans, money_),
  };
  packet_process_turn_ans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_process_turn_ans_descriptor_,
      packet_process_turn_ans::internal_default_instance(),
      packet_process_turn_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ans, _has_bits_),
      -1,
      -1,
      sizeof(packet_process_turn_ans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ans, _internal_metadata_));
  packet_process_turn_ntf_descriptor_ = file->message_type(5);
  static const int packet_process_turn_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, public_card_number_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, public_card_number_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, opponent_card_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, remain_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, my_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, opponent_money_),
  };
  packet_process_turn_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_process_turn_ntf_descriptor_,
      packet_process_turn_ntf::internal_default_instance(),
      packet_process_turn_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_process_turn_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_turn_ntf, _internal_metadata_));
  packet_process_check_card_ntf_descriptor_ = file->message_type(6);
  static const int packet_process_check_card_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_check_card_ntf, result_),
  };
  packet_process_check_card_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_process_check_card_ntf_descriptor_,
      packet_process_check_card_ntf::internal_default_instance(),
      packet_process_check_card_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_check_card_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_process_check_card_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_process_check_card_ntf, _internal_metadata_));
  packet_disconnect_room_ntf_descriptor_ = file->message_type(7);
  static const int packet_disconnect_room_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_disconnect_room_ntf, room_key_),
  };
  packet_disconnect_room_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_disconnect_room_ntf_descriptor_,
      packet_disconnect_room_ntf::internal_default_instance(),
      packet_disconnect_room_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_disconnect_room_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_disconnect_room_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_disconnect_room_ntf, _internal_metadata_));
  packet_echo_ntf_descriptor_ = file->message_type(8);
  static const int packet_echo_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_echo_ntf, str_),
  };
  packet_echo_ntf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_echo_ntf_descriptor_,
      packet_echo_ntf::internal_default_instance(),
      packet_echo_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_echo_ntf, _has_bits_),
      -1,
      -1,
      sizeof(packet_echo_ntf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_echo_ntf, _internal_metadata_));
  message_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logic_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_enter_req_descriptor_, packet_enter_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_enter_ans_descriptor_, packet_enter_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_game_state_ntf_descriptor_, packet_game_state_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_process_turn_req_descriptor_, packet_process_turn_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_process_turn_ans_descriptor_, packet_process_turn_ans::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_process_turn_ntf_descriptor_, packet_process_turn_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_process_check_card_ntf_descriptor_, packet_process_check_card_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_disconnect_room_ntf_descriptor_, packet_disconnect_room_ntf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_echo_ntf_descriptor_, packet_echo_ntf::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logic_5fserver_2eproto() {
  packet_enter_req_default_instance_.Shutdown();
  delete packet_enter_req_reflection_;
  packet_enter_ans_default_instance_.Shutdown();
  delete packet_enter_ans_reflection_;
  packet_game_state_ntf_default_instance_.Shutdown();
  delete packet_game_state_ntf_reflection_;
  packet_process_turn_req_default_instance_.Shutdown();
  delete packet_process_turn_req_reflection_;
  packet_process_turn_ans_default_instance_.Shutdown();
  delete packet_process_turn_ans_reflection_;
  packet_process_turn_ntf_default_instance_.Shutdown();
  delete packet_process_turn_ntf_reflection_;
  packet_process_check_card_ntf_default_instance_.Shutdown();
  delete packet_process_check_card_ntf_reflection_;
  packet_disconnect_room_ntf_default_instance_.Shutdown();
  delete packet_disconnect_room_ntf_reflection_;
  packet_echo_ntf_default_instance_.Shutdown();
  delete packet_echo_ntf_reflection_;
}

void protobuf_InitDefaults_logic_5fserver_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  packet_enter_req_default_instance_.DefaultConstruct();
  packet_enter_ans_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_game_state_ntf_default_instance_.DefaultConstruct();
  packet_process_turn_req_default_instance_.DefaultConstruct();
  packet_process_turn_ans_default_instance_.DefaultConstruct();
  packet_process_turn_ntf_default_instance_.DefaultConstruct();
  packet_process_check_card_ntf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_disconnect_room_ntf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  packet_echo_ntf_default_instance_.DefaultConstruct();
  packet_enter_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_enter_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_game_state_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_process_turn_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_process_turn_ans_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_process_turn_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_process_check_card_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_disconnect_room_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
  packet_echo_ntf_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_logic_5fserver_2eproto_once_);
void protobuf_InitDefaults_logic_5fserver_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_logic_5fserver_2eproto_once_,
                 &protobuf_InitDefaults_logic_5fserver_2eproto_impl);
}
void protobuf_AddDesc_logic_5fserver_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_logic_5fserver_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022logic_server.proto\022\014logic_server\"8\n\020pa"
    "cket_enter_req\022\022\n\nplayer_key\030\001 \002(\t\022\020\n\010ro"
    "om_key\030\002 \002(\t\"\"\n\020packet_enter_ans\022\016\n\006resu"
    "lt\030\001 \002(\005\">\n\025packet_game_state_ntf\022\r\n\005sta"
    "te\030\001 \002(\005\022\026\n\016win_player_key\030\002 \002(\t\"C\n\027pack"
    "et_process_turn_req\022\020\n\010my_money\030\001 \002(\005\022\026\n"
    "\016opponent_money\030\002 \002(\005\"(\n\027packet_process_"
    "turn_ans\022\r\n\005money\030\001 \002(\005\"\263\001\n\027packet_proce"
    "ss_turn_ntf\022\034\n\024public_card_number_1\030\001 \002("
    "\005\022\034\n\024public_card_number_2\030\002 \002(\005\022\034\n\024oppon"
    "ent_card_number\030\003 \002(\005\022\024\n\014remain_money\030\004 "
    "\002(\005\022\020\n\010my_money\030\005 \002(\005\022\026\n\016opponent_money\030"
    "\006 \002(\005\"/\n\035packet_process_check_card_ntf\022\016"
    "\n\006result\030\001 \002(\005\".\n\032packet_disconnect_room"
    "_ntf\022\020\n\010room_key\030\001 \002(\t\"\036\n\017packet_echo_nt"
    "f\022\013\n\003str\030\001 \002(\t*\301\001\n\014message_type\022\r\n\tENTER"
    "_REQ\020\000\022\r\n\tENTER_ANS\020\001\022\022\n\016GAME_STATE_NTF\020"
    "\002\022\024\n\020PROCESS_TURN_REQ\020\003\022\024\n\020PROCESS_TURN_"
    "ANS\020\004\022\024\n\020PROCESS_TURN_NTF\020\005\022\032\n\026PROCESS_C"
    "HECK_CARD_NTF\020\006\022\023\n\017DISCONNECT_ROOM\020\007\022\014\n\010"
    "ECHO_NTF\020\010", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logic_server.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logic_5fserver_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_logic_5fserver_2eproto_once_);
void protobuf_AddDesc_logic_5fserver_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_logic_5fserver_2eproto_once_,
                 &protobuf_AddDesc_logic_5fserver_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logic_5fserver_2eproto {
  StaticDescriptorInitializer_logic_5fserver_2eproto() {
    protobuf_AddDesc_logic_5fserver_2eproto();
  }
} static_descriptor_initializer_logic_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* message_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_type_descriptor_;
}
bool message_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_enter_req::kPlayerKeyFieldNumber;
const int packet_enter_req::kRoomKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_enter_req::packet_enter_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_enter_req)
}

void packet_enter_req::InitAsDefaultInstance() {
}

packet_enter_req::packet_enter_req(const packet_enter_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_enter_req)
}

void packet_enter_req::SharedCtor() {
  _cached_size_ = 0;
  player_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_enter_req::~packet_enter_req() {
  // @@protoc_insertion_point(destructor:logic_server.packet_enter_req)
  SharedDtor();
}

void packet_enter_req::SharedDtor() {
  player_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_enter_req_descriptor_;
}

const packet_enter_req& packet_enter_req::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_enter_req> packet_enter_req_default_instance_;

packet_enter_req* packet_enter_req::New(::google::protobuf::Arena* arena) const {
  packet_enter_req* n = new packet_enter_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_enter_req::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_enter_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_player_key()) {
      player_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_room_key()) {
      room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_enter_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_key().data(), this->player_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logic_server.packet_enter_req.player_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_key;
        break;
      }

      // required string room_key = 2;
      case 2: {
        if (tag == 18) {
         parse_room_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_key().data(), this->room_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logic_server.packet_enter_req.room_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_enter_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_enter_req)
  return false;
#undef DO_
}

void packet_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_enter_req)
  // required string player_key = 1;
  if (has_player_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_key().data(), this->player_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_enter_req.player_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_key(), output);
  }

  // required string room_key = 2;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_enter_req.room_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_enter_req)
}

::google::protobuf::uint8* packet_enter_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_enter_req)
  // required string player_key = 1;
  if (has_player_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_key().data(), this->player_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_enter_req.player_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_key(), target);
  }

  // required string room_key = 2;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_enter_req.room_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_enter_req)
  return target;
}

size_t packet_enter_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logic_server.packet_enter_req)
  size_t total_size = 0;

  if (has_player_key()) {
    // required string player_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_key());
  }

  if (has_room_key()) {
    // required string room_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());
  }

  return total_size;
}
size_t packet_enter_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_enter_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string player_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_key());

    // required string room_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_enter_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_enter_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_enter_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_enter_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_enter_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_enter_req::MergeFrom(const packet_enter_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_enter_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_enter_req::UnsafeMergeFrom(const packet_enter_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_key()) {
      set_has_player_key();
      player_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_key_);
    }
    if (from.has_room_key()) {
      set_has_room_key();
      room_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_enter_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_enter_req::CopyFrom(const packet_enter_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_enter_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_enter_req::Swap(packet_enter_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_enter_req::InternalSwap(packet_enter_req* other) {
  player_key_.Swap(&other->player_key_);
  room_key_.Swap(&other->room_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_enter_req_descriptor_;
  metadata.reflection = packet_enter_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_enter_req

// required string player_key = 1;
bool packet_enter_req::has_player_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_enter_req::set_has_player_key() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_enter_req::clear_has_player_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_enter_req::clear_player_key() {
  player_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_key();
}
const ::std::string& packet_enter_req::player_key() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_enter_req.player_key)
  return player_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_req::set_player_key(const ::std::string& value) {
  set_has_player_key();
  player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logic_server.packet_enter_req.player_key)
}
void packet_enter_req::set_player_key(const char* value) {
  set_has_player_key();
  player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logic_server.packet_enter_req.player_key)
}
void packet_enter_req::set_player_key(const char* value, size_t size) {
  set_has_player_key();
  player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logic_server.packet_enter_req.player_key)
}
::std::string* packet_enter_req::mutable_player_key() {
  set_has_player_key();
  // @@protoc_insertion_point(field_mutable:logic_server.packet_enter_req.player_key)
  return player_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_enter_req::release_player_key() {
  // @@protoc_insertion_point(field_release:logic_server.packet_enter_req.player_key)
  clear_has_player_key();
  return player_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_req::set_allocated_player_key(::std::string* player_key) {
  if (player_key != NULL) {
    set_has_player_key();
  } else {
    clear_has_player_key();
  }
  player_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_key);
  // @@protoc_insertion_point(field_set_allocated:logic_server.packet_enter_req.player_key)
}

// required string room_key = 2;
bool packet_enter_req::has_room_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_enter_req::set_has_room_key() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_enter_req::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_enter_req::clear_room_key() {
  room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_key();
}
const ::std::string& packet_enter_req::room_key() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_enter_req.room_key)
  return room_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_req::set_room_key(const ::std::string& value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logic_server.packet_enter_req.room_key)
}
void packet_enter_req::set_room_key(const char* value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logic_server.packet_enter_req.room_key)
}
void packet_enter_req::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logic_server.packet_enter_req.room_key)
}
::std::string* packet_enter_req::mutable_room_key() {
  set_has_room_key();
  // @@protoc_insertion_point(field_mutable:logic_server.packet_enter_req.room_key)
  return room_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_enter_req::release_room_key() {
  // @@protoc_insertion_point(field_release:logic_server.packet_enter_req.room_key)
  clear_has_room_key();
  return room_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_enter_req::set_allocated_room_key(::std::string* room_key) {
  if (room_key != NULL) {
    set_has_room_key();
  } else {
    clear_has_room_key();
  }
  room_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_key);
  // @@protoc_insertion_point(field_set_allocated:logic_server.packet_enter_req.room_key)
}

inline const packet_enter_req* packet_enter_req::internal_default_instance() {
  return &packet_enter_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_enter_ans::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_enter_ans::packet_enter_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_enter_ans)
}

void packet_enter_ans::InitAsDefaultInstance() {
}

packet_enter_ans::packet_enter_ans(const packet_enter_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_enter_ans)
}

void packet_enter_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

packet_enter_ans::~packet_enter_ans() {
  // @@protoc_insertion_point(destructor:logic_server.packet_enter_ans)
  SharedDtor();
}

void packet_enter_ans::SharedDtor() {
}

void packet_enter_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_enter_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_enter_ans_descriptor_;
}

const packet_enter_ans& packet_enter_ans::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_enter_ans> packet_enter_ans_default_instance_;

packet_enter_ans* packet_enter_ans::New(::google::protobuf::Arena* arena) const {
  packet_enter_ans* n = new packet_enter_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_enter_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_enter_ans)
  result_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_enter_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_enter_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_enter_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_enter_ans)
  return false;
#undef DO_
}

void packet_enter_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_enter_ans)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_enter_ans)
}

::google::protobuf::uint8* packet_enter_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_enter_ans)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_enter_ans)
  return target;
}

size_t packet_enter_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_enter_ans)
  size_t total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_enter_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_enter_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_enter_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_enter_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_enter_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_enter_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_enter_ans::MergeFrom(const packet_enter_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_enter_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_enter_ans::UnsafeMergeFrom(const packet_enter_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_enter_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_enter_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_enter_ans::CopyFrom(const packet_enter_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_enter_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_enter_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_enter_ans::Swap(packet_enter_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_enter_ans::InternalSwap(packet_enter_ans* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_enter_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_enter_ans_descriptor_;
  metadata.reflection = packet_enter_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_enter_ans

// required int32 result = 1;
bool packet_enter_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_enter_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_enter_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_enter_ans::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 packet_enter_ans::result() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_enter_ans.result)
  return result_;
}
void packet_enter_ans::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_enter_ans.result)
}

inline const packet_enter_ans* packet_enter_ans::internal_default_instance() {
  return &packet_enter_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_game_state_ntf::kStateFieldNumber;
const int packet_game_state_ntf::kWinPlayerKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_game_state_ntf::packet_game_state_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_game_state_ntf)
}

void packet_game_state_ntf::InitAsDefaultInstance() {
}

packet_game_state_ntf::packet_game_state_ntf(const packet_game_state_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_game_state_ntf)
}

void packet_game_state_ntf::SharedCtor() {
  _cached_size_ = 0;
  win_player_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

packet_game_state_ntf::~packet_game_state_ntf() {
  // @@protoc_insertion_point(destructor:logic_server.packet_game_state_ntf)
  SharedDtor();
}

void packet_game_state_ntf::SharedDtor() {
  win_player_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_game_state_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_game_state_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_game_state_ntf_descriptor_;
}

const packet_game_state_ntf& packet_game_state_ntf::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_game_state_ntf> packet_game_state_ntf_default_instance_;

packet_game_state_ntf* packet_game_state_ntf::New(::google::protobuf::Arena* arena) const {
  packet_game_state_ntf* n = new packet_game_state_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_game_state_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_game_state_ntf)
  if (_has_bits_[0 / 32] & 3u) {
    state_ = 0;
    if (has_win_player_key()) {
      win_player_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_game_state_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_game_state_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_win_player_key;
        break;
      }

      // required string win_player_key = 2;
      case 2: {
        if (tag == 18) {
         parse_win_player_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_player_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->win_player_key().data(), this->win_player_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logic_server.packet_game_state_ntf.win_player_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_game_state_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_game_state_ntf)
  return false;
#undef DO_
}

void packet_game_state_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_game_state_ntf)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required string win_player_key = 2;
  if (has_win_player_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->win_player_key().data(), this->win_player_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_game_state_ntf.win_player_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->win_player_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_game_state_ntf)
}

::google::protobuf::uint8* packet_game_state_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_game_state_ntf)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // required string win_player_key = 2;
  if (has_win_player_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->win_player_key().data(), this->win_player_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_game_state_ntf.win_player_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->win_player_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_game_state_ntf)
  return target;
}

size_t packet_game_state_ntf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logic_server.packet_game_state_ntf)
  size_t total_size = 0;

  if (has_state()) {
    // required int32 state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_win_player_key()) {
    // required string win_player_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->win_player_key());
  }

  return total_size;
}
size_t packet_game_state_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_game_state_ntf)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required string win_player_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->win_player_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_game_state_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_game_state_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_game_state_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_game_state_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_game_state_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_game_state_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_game_state_ntf::MergeFrom(const packet_game_state_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_game_state_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_game_state_ntf::UnsafeMergeFrom(const packet_game_state_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_win_player_key()) {
      set_has_win_player_key();
      win_player_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.win_player_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_game_state_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_game_state_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_game_state_ntf::CopyFrom(const packet_game_state_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_game_state_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_game_state_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_game_state_ntf::Swap(packet_game_state_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_game_state_ntf::InternalSwap(packet_game_state_ntf* other) {
  std::swap(state_, other->state_);
  win_player_key_.Swap(&other->win_player_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_game_state_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_game_state_ntf_descriptor_;
  metadata.reflection = packet_game_state_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_game_state_ntf

// required int32 state = 1;
bool packet_game_state_ntf::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_game_state_ntf::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_game_state_ntf::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_game_state_ntf::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 packet_game_state_ntf::state() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_game_state_ntf.state)
  return state_;
}
void packet_game_state_ntf::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_game_state_ntf.state)
}

// required string win_player_key = 2;
bool packet_game_state_ntf::has_win_player_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_game_state_ntf::set_has_win_player_key() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_game_state_ntf::clear_has_win_player_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_game_state_ntf::clear_win_player_key() {
  win_player_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_win_player_key();
}
const ::std::string& packet_game_state_ntf::win_player_key() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_game_state_ntf.win_player_key)
  return win_player_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_game_state_ntf::set_win_player_key(const ::std::string& value) {
  set_has_win_player_key();
  win_player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logic_server.packet_game_state_ntf.win_player_key)
}
void packet_game_state_ntf::set_win_player_key(const char* value) {
  set_has_win_player_key();
  win_player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logic_server.packet_game_state_ntf.win_player_key)
}
void packet_game_state_ntf::set_win_player_key(const char* value, size_t size) {
  set_has_win_player_key();
  win_player_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logic_server.packet_game_state_ntf.win_player_key)
}
::std::string* packet_game_state_ntf::mutable_win_player_key() {
  set_has_win_player_key();
  // @@protoc_insertion_point(field_mutable:logic_server.packet_game_state_ntf.win_player_key)
  return win_player_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_game_state_ntf::release_win_player_key() {
  // @@protoc_insertion_point(field_release:logic_server.packet_game_state_ntf.win_player_key)
  clear_has_win_player_key();
  return win_player_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_game_state_ntf::set_allocated_win_player_key(::std::string* win_player_key) {
  if (win_player_key != NULL) {
    set_has_win_player_key();
  } else {
    clear_has_win_player_key();
  }
  win_player_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), win_player_key);
  // @@protoc_insertion_point(field_set_allocated:logic_server.packet_game_state_ntf.win_player_key)
}

inline const packet_game_state_ntf* packet_game_state_ntf::internal_default_instance() {
  return &packet_game_state_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_process_turn_req::kMyMoneyFieldNumber;
const int packet_process_turn_req::kOpponentMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_process_turn_req::packet_process_turn_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_process_turn_req)
}

void packet_process_turn_req::InitAsDefaultInstance() {
}

packet_process_turn_req::packet_process_turn_req(const packet_process_turn_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_process_turn_req)
}

void packet_process_turn_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&my_money_, 0, reinterpret_cast<char*>(&opponent_money_) -
    reinterpret_cast<char*>(&my_money_) + sizeof(opponent_money_));
}

packet_process_turn_req::~packet_process_turn_req() {
  // @@protoc_insertion_point(destructor:logic_server.packet_process_turn_req)
  SharedDtor();
}

void packet_process_turn_req::SharedDtor() {
}

void packet_process_turn_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_process_turn_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_process_turn_req_descriptor_;
}

const packet_process_turn_req& packet_process_turn_req::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_process_turn_req> packet_process_turn_req_default_instance_;

packet_process_turn_req* packet_process_turn_req::New(::google::protobuf::Arena* arena) const {
  packet_process_turn_req* n = new packet_process_turn_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_process_turn_req::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_process_turn_req)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(packet_process_turn_req, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<packet_process_turn_req*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(my_money_, opponent_money_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_process_turn_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_process_turn_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 my_money = 1;
      case 1: {
        if (tag == 8) {
          set_has_my_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opponent_money;
        break;
      }

      // required int32 opponent_money = 2;
      case 2: {
        if (tag == 16) {
         parse_opponent_money:
          set_has_opponent_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opponent_money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_process_turn_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_process_turn_req)
  return false;
#undef DO_
}

void packet_process_turn_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_process_turn_req)
  // required int32 my_money = 1;
  if (has_my_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->my_money(), output);
  }

  // required int32 opponent_money = 2;
  if (has_opponent_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opponent_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_process_turn_req)
}

::google::protobuf::uint8* packet_process_turn_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_process_turn_req)
  // required int32 my_money = 1;
  if (has_my_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->my_money(), target);
  }

  // required int32 opponent_money = 2;
  if (has_opponent_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opponent_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_process_turn_req)
  return target;
}

size_t packet_process_turn_req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logic_server.packet_process_turn_req)
  size_t total_size = 0;

  if (has_my_money()) {
    // required int32 my_money = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->my_money());
  }

  if (has_opponent_money()) {
    // required int32 opponent_money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_money());
  }

  return total_size;
}
size_t packet_process_turn_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_process_turn_req)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 my_money = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->my_money());

    // required int32 opponent_money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_process_turn_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_process_turn_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_process_turn_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_process_turn_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_process_turn_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_process_turn_req)
    UnsafeMergeFrom(*source);
  }
}

void packet_process_turn_req::MergeFrom(const packet_process_turn_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_process_turn_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_process_turn_req::UnsafeMergeFrom(const packet_process_turn_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_money()) {
      set_my_money(from.my_money());
    }
    if (from.has_opponent_money()) {
      set_opponent_money(from.opponent_money());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_process_turn_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_process_turn_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_process_turn_req::CopyFrom(const packet_process_turn_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_process_turn_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_process_turn_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet_process_turn_req::Swap(packet_process_turn_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_process_turn_req::InternalSwap(packet_process_turn_req* other) {
  std::swap(my_money_, other->my_money_);
  std::swap(opponent_money_, other->opponent_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_process_turn_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_process_turn_req_descriptor_;
  metadata.reflection = packet_process_turn_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_process_turn_req

// required int32 my_money = 1;
bool packet_process_turn_req::has_my_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_process_turn_req::set_has_my_money() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_process_turn_req::clear_has_my_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_process_turn_req::clear_my_money() {
  my_money_ = 0;
  clear_has_my_money();
}
::google::protobuf::int32 packet_process_turn_req::my_money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_req.my_money)
  return my_money_;
}
void packet_process_turn_req::set_my_money(::google::protobuf::int32 value) {
  set_has_my_money();
  my_money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_req.my_money)
}

// required int32 opponent_money = 2;
bool packet_process_turn_req::has_opponent_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_process_turn_req::set_has_opponent_money() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_process_turn_req::clear_has_opponent_money() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_process_turn_req::clear_opponent_money() {
  opponent_money_ = 0;
  clear_has_opponent_money();
}
::google::protobuf::int32 packet_process_turn_req::opponent_money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_req.opponent_money)
  return opponent_money_;
}
void packet_process_turn_req::set_opponent_money(::google::protobuf::int32 value) {
  set_has_opponent_money();
  opponent_money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_req.opponent_money)
}

inline const packet_process_turn_req* packet_process_turn_req::internal_default_instance() {
  return &packet_process_turn_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_process_turn_ans::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_process_turn_ans::packet_process_turn_ans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_process_turn_ans)
}

void packet_process_turn_ans::InitAsDefaultInstance() {
}

packet_process_turn_ans::packet_process_turn_ans(const packet_process_turn_ans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_process_turn_ans)
}

void packet_process_turn_ans::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
}

packet_process_turn_ans::~packet_process_turn_ans() {
  // @@protoc_insertion_point(destructor:logic_server.packet_process_turn_ans)
  SharedDtor();
}

void packet_process_turn_ans::SharedDtor() {
}

void packet_process_turn_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_process_turn_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_process_turn_ans_descriptor_;
}

const packet_process_turn_ans& packet_process_turn_ans::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_process_turn_ans> packet_process_turn_ans_default_instance_;

packet_process_turn_ans* packet_process_turn_ans::New(::google::protobuf::Arena* arena) const {
  packet_process_turn_ans* n = new packet_process_turn_ans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_process_turn_ans::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_process_turn_ans)
  money_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_process_turn_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_process_turn_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (tag == 8) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_process_turn_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_process_turn_ans)
  return false;
#undef DO_
}

void packet_process_turn_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_process_turn_ans)
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_process_turn_ans)
}

::google::protobuf::uint8* packet_process_turn_ans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_process_turn_ans)
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_process_turn_ans)
  return target;
}

size_t packet_process_turn_ans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_process_turn_ans)
  size_t total_size = 0;

  // required int32 money = 1;
  if (has_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_process_turn_ans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_process_turn_ans)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_process_turn_ans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_process_turn_ans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_process_turn_ans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_process_turn_ans)
    UnsafeMergeFrom(*source);
  }
}

void packet_process_turn_ans::MergeFrom(const packet_process_turn_ans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_process_turn_ans)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_process_turn_ans::UnsafeMergeFrom(const packet_process_turn_ans& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_process_turn_ans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_process_turn_ans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_process_turn_ans::CopyFrom(const packet_process_turn_ans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_process_turn_ans)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_process_turn_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_process_turn_ans::Swap(packet_process_turn_ans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_process_turn_ans::InternalSwap(packet_process_turn_ans* other) {
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_process_turn_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_process_turn_ans_descriptor_;
  metadata.reflection = packet_process_turn_ans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_process_turn_ans

// required int32 money = 1;
bool packet_process_turn_ans::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_process_turn_ans::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_process_turn_ans::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_process_turn_ans::clear_money() {
  money_ = 0;
  clear_has_money();
}
::google::protobuf::int32 packet_process_turn_ans::money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ans.money)
  return money_;
}
void packet_process_turn_ans::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ans.money)
}

inline const packet_process_turn_ans* packet_process_turn_ans::internal_default_instance() {
  return &packet_process_turn_ans_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_process_turn_ntf::kPublicCardNumber1FieldNumber;
const int packet_process_turn_ntf::kPublicCardNumber2FieldNumber;
const int packet_process_turn_ntf::kOpponentCardNumberFieldNumber;
const int packet_process_turn_ntf::kRemainMoneyFieldNumber;
const int packet_process_turn_ntf::kMyMoneyFieldNumber;
const int packet_process_turn_ntf::kOpponentMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_process_turn_ntf::packet_process_turn_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_process_turn_ntf)
}

void packet_process_turn_ntf::InitAsDefaultInstance() {
}

packet_process_turn_ntf::packet_process_turn_ntf(const packet_process_turn_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_process_turn_ntf)
}

void packet_process_turn_ntf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&public_card_number_1_, 0, reinterpret_cast<char*>(&opponent_money_) -
    reinterpret_cast<char*>(&public_card_number_1_) + sizeof(opponent_money_));
}

packet_process_turn_ntf::~packet_process_turn_ntf() {
  // @@protoc_insertion_point(destructor:logic_server.packet_process_turn_ntf)
  SharedDtor();
}

void packet_process_turn_ntf::SharedDtor() {
}

void packet_process_turn_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_process_turn_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_process_turn_ntf_descriptor_;
}

const packet_process_turn_ntf& packet_process_turn_ntf::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_process_turn_ntf> packet_process_turn_ntf_default_instance_;

packet_process_turn_ntf* packet_process_turn_ntf::New(::google::protobuf::Arena* arena) const {
  packet_process_turn_ntf* n = new packet_process_turn_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_process_turn_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_process_turn_ntf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(packet_process_turn_ntf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<packet_process_turn_ntf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(public_card_number_1_, opponent_money_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_process_turn_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_process_turn_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 public_card_number_1 = 1;
      case 1: {
        if (tag == 8) {
          set_has_public_card_number_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_card_number_1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_public_card_number_2;
        break;
      }

      // required int32 public_card_number_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_public_card_number_2:
          set_has_public_card_number_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_card_number_2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opponent_card_number;
        break;
      }

      // required int32 opponent_card_number = 3;
      case 3: {
        if (tag == 24) {
         parse_opponent_card_number:
          set_has_opponent_card_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opponent_card_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remain_money;
        break;
      }

      // required int32 remain_money = 4;
      case 4: {
        if (tag == 32) {
         parse_remain_money:
          set_has_remain_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_my_money;
        break;
      }

      // required int32 my_money = 5;
      case 5: {
        if (tag == 40) {
         parse_my_money:
          set_has_my_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opponent_money;
        break;
      }

      // required int32 opponent_money = 6;
      case 6: {
        if (tag == 48) {
         parse_opponent_money:
          set_has_opponent_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opponent_money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_process_turn_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_process_turn_ntf)
  return false;
#undef DO_
}

void packet_process_turn_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_process_turn_ntf)
  // required int32 public_card_number_1 = 1;
  if (has_public_card_number_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->public_card_number_1(), output);
  }

  // required int32 public_card_number_2 = 2;
  if (has_public_card_number_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_card_number_2(), output);
  }

  // required int32 opponent_card_number = 3;
  if (has_opponent_card_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opponent_card_number(), output);
  }

  // required int32 remain_money = 4;
  if (has_remain_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_money(), output);
  }

  // required int32 my_money = 5;
  if (has_my_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->my_money(), output);
  }

  // required int32 opponent_money = 6;
  if (has_opponent_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->opponent_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_process_turn_ntf)
}

::google::protobuf::uint8* packet_process_turn_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_process_turn_ntf)
  // required int32 public_card_number_1 = 1;
  if (has_public_card_number_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->public_card_number_1(), target);
  }

  // required int32 public_card_number_2 = 2;
  if (has_public_card_number_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_card_number_2(), target);
  }

  // required int32 opponent_card_number = 3;
  if (has_opponent_card_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opponent_card_number(), target);
  }

  // required int32 remain_money = 4;
  if (has_remain_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_money(), target);
  }

  // required int32 my_money = 5;
  if (has_my_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->my_money(), target);
  }

  // required int32 opponent_money = 6;
  if (has_opponent_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->opponent_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_process_turn_ntf)
  return target;
}

size_t packet_process_turn_ntf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logic_server.packet_process_turn_ntf)
  size_t total_size = 0;

  if (has_public_card_number_1()) {
    // required int32 public_card_number_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_card_number_1());
  }

  if (has_public_card_number_2()) {
    // required int32 public_card_number_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_card_number_2());
  }

  if (has_opponent_card_number()) {
    // required int32 opponent_card_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_card_number());
  }

  if (has_remain_money()) {
    // required int32 remain_money = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remain_money());
  }

  if (has_my_money()) {
    // required int32 my_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->my_money());
  }

  if (has_opponent_money()) {
    // required int32 opponent_money = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_money());
  }

  return total_size;
}
size_t packet_process_turn_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_process_turn_ntf)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 public_card_number_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_card_number_1());

    // required int32 public_card_number_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_card_number_2());

    // required int32 opponent_card_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_card_number());

    // required int32 remain_money = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remain_money());

    // required int32 my_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->my_money());

    // required int32 opponent_money = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opponent_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_process_turn_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_process_turn_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_process_turn_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_process_turn_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_process_turn_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_process_turn_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_process_turn_ntf::MergeFrom(const packet_process_turn_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_process_turn_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_process_turn_ntf::UnsafeMergeFrom(const packet_process_turn_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_card_number_1()) {
      set_public_card_number_1(from.public_card_number_1());
    }
    if (from.has_public_card_number_2()) {
      set_public_card_number_2(from.public_card_number_2());
    }
    if (from.has_opponent_card_number()) {
      set_opponent_card_number(from.opponent_card_number());
    }
    if (from.has_remain_money()) {
      set_remain_money(from.remain_money());
    }
    if (from.has_my_money()) {
      set_my_money(from.my_money());
    }
    if (from.has_opponent_money()) {
      set_opponent_money(from.opponent_money());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_process_turn_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_process_turn_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_process_turn_ntf::CopyFrom(const packet_process_turn_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_process_turn_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_process_turn_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void packet_process_turn_ntf::Swap(packet_process_turn_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_process_turn_ntf::InternalSwap(packet_process_turn_ntf* other) {
  std::swap(public_card_number_1_, other->public_card_number_1_);
  std::swap(public_card_number_2_, other->public_card_number_2_);
  std::swap(opponent_card_number_, other->opponent_card_number_);
  std::swap(remain_money_, other->remain_money_);
  std::swap(my_money_, other->my_money_);
  std::swap(opponent_money_, other->opponent_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_process_turn_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_process_turn_ntf_descriptor_;
  metadata.reflection = packet_process_turn_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_process_turn_ntf

// required int32 public_card_number_1 = 1;
bool packet_process_turn_ntf::has_public_card_number_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_process_turn_ntf::set_has_public_card_number_1() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_process_turn_ntf::clear_has_public_card_number_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_process_turn_ntf::clear_public_card_number_1() {
  public_card_number_1_ = 0;
  clear_has_public_card_number_1();
}
::google::protobuf::int32 packet_process_turn_ntf::public_card_number_1() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.public_card_number_1)
  return public_card_number_1_;
}
void packet_process_turn_ntf::set_public_card_number_1(::google::protobuf::int32 value) {
  set_has_public_card_number_1();
  public_card_number_1_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.public_card_number_1)
}

// required int32 public_card_number_2 = 2;
bool packet_process_turn_ntf::has_public_card_number_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_process_turn_ntf::set_has_public_card_number_2() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_process_turn_ntf::clear_has_public_card_number_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_process_turn_ntf::clear_public_card_number_2() {
  public_card_number_2_ = 0;
  clear_has_public_card_number_2();
}
::google::protobuf::int32 packet_process_turn_ntf::public_card_number_2() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.public_card_number_2)
  return public_card_number_2_;
}
void packet_process_turn_ntf::set_public_card_number_2(::google::protobuf::int32 value) {
  set_has_public_card_number_2();
  public_card_number_2_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.public_card_number_2)
}

// required int32 opponent_card_number = 3;
bool packet_process_turn_ntf::has_opponent_card_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_process_turn_ntf::set_has_opponent_card_number() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_process_turn_ntf::clear_has_opponent_card_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_process_turn_ntf::clear_opponent_card_number() {
  opponent_card_number_ = 0;
  clear_has_opponent_card_number();
}
::google::protobuf::int32 packet_process_turn_ntf::opponent_card_number() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.opponent_card_number)
  return opponent_card_number_;
}
void packet_process_turn_ntf::set_opponent_card_number(::google::protobuf::int32 value) {
  set_has_opponent_card_number();
  opponent_card_number_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.opponent_card_number)
}

// required int32 remain_money = 4;
bool packet_process_turn_ntf::has_remain_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void packet_process_turn_ntf::set_has_remain_money() {
  _has_bits_[0] |= 0x00000008u;
}
void packet_process_turn_ntf::clear_has_remain_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void packet_process_turn_ntf::clear_remain_money() {
  remain_money_ = 0;
  clear_has_remain_money();
}
::google::protobuf::int32 packet_process_turn_ntf::remain_money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.remain_money)
  return remain_money_;
}
void packet_process_turn_ntf::set_remain_money(::google::protobuf::int32 value) {
  set_has_remain_money();
  remain_money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.remain_money)
}

// required int32 my_money = 5;
bool packet_process_turn_ntf::has_my_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void packet_process_turn_ntf::set_has_my_money() {
  _has_bits_[0] |= 0x00000010u;
}
void packet_process_turn_ntf::clear_has_my_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void packet_process_turn_ntf::clear_my_money() {
  my_money_ = 0;
  clear_has_my_money();
}
::google::protobuf::int32 packet_process_turn_ntf::my_money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.my_money)
  return my_money_;
}
void packet_process_turn_ntf::set_my_money(::google::protobuf::int32 value) {
  set_has_my_money();
  my_money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.my_money)
}

// required int32 opponent_money = 6;
bool packet_process_turn_ntf::has_opponent_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void packet_process_turn_ntf::set_has_opponent_money() {
  _has_bits_[0] |= 0x00000020u;
}
void packet_process_turn_ntf::clear_has_opponent_money() {
  _has_bits_[0] &= ~0x00000020u;
}
void packet_process_turn_ntf::clear_opponent_money() {
  opponent_money_ = 0;
  clear_has_opponent_money();
}
::google::protobuf::int32 packet_process_turn_ntf::opponent_money() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_turn_ntf.opponent_money)
  return opponent_money_;
}
void packet_process_turn_ntf::set_opponent_money(::google::protobuf::int32 value) {
  set_has_opponent_money();
  opponent_money_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_turn_ntf.opponent_money)
}

inline const packet_process_turn_ntf* packet_process_turn_ntf::internal_default_instance() {
  return &packet_process_turn_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_process_check_card_ntf::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_process_check_card_ntf::packet_process_check_card_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_process_check_card_ntf)
}

void packet_process_check_card_ntf::InitAsDefaultInstance() {
}

packet_process_check_card_ntf::packet_process_check_card_ntf(const packet_process_check_card_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_process_check_card_ntf)
}

void packet_process_check_card_ntf::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

packet_process_check_card_ntf::~packet_process_check_card_ntf() {
  // @@protoc_insertion_point(destructor:logic_server.packet_process_check_card_ntf)
  SharedDtor();
}

void packet_process_check_card_ntf::SharedDtor() {
}

void packet_process_check_card_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_process_check_card_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_process_check_card_ntf_descriptor_;
}

const packet_process_check_card_ntf& packet_process_check_card_ntf::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_process_check_card_ntf> packet_process_check_card_ntf_default_instance_;

packet_process_check_card_ntf* packet_process_check_card_ntf::New(::google::protobuf::Arena* arena) const {
  packet_process_check_card_ntf* n = new packet_process_check_card_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_process_check_card_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_process_check_card_ntf)
  result_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_process_check_card_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_process_check_card_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_process_check_card_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_process_check_card_ntf)
  return false;
#undef DO_
}

void packet_process_check_card_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_process_check_card_ntf)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_process_check_card_ntf)
}

::google::protobuf::uint8* packet_process_check_card_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_process_check_card_ntf)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_process_check_card_ntf)
  return target;
}

size_t packet_process_check_card_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_process_check_card_ntf)
  size_t total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_process_check_card_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_process_check_card_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_process_check_card_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_process_check_card_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_process_check_card_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_process_check_card_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_process_check_card_ntf::MergeFrom(const packet_process_check_card_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_process_check_card_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_process_check_card_ntf::UnsafeMergeFrom(const packet_process_check_card_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_process_check_card_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_process_check_card_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_process_check_card_ntf::CopyFrom(const packet_process_check_card_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_process_check_card_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_process_check_card_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_process_check_card_ntf::Swap(packet_process_check_card_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_process_check_card_ntf::InternalSwap(packet_process_check_card_ntf* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_process_check_card_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_process_check_card_ntf_descriptor_;
  metadata.reflection = packet_process_check_card_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_process_check_card_ntf

// required int32 result = 1;
bool packet_process_check_card_ntf::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_process_check_card_ntf::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_process_check_card_ntf::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_process_check_card_ntf::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 packet_process_check_card_ntf::result() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_process_check_card_ntf.result)
  return result_;
}
void packet_process_check_card_ntf::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:logic_server.packet_process_check_card_ntf.result)
}

inline const packet_process_check_card_ntf* packet_process_check_card_ntf::internal_default_instance() {
  return &packet_process_check_card_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_disconnect_room_ntf::kRoomKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_disconnect_room_ntf::packet_disconnect_room_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_disconnect_room_ntf)
}

void packet_disconnect_room_ntf::InitAsDefaultInstance() {
}

packet_disconnect_room_ntf::packet_disconnect_room_ntf(const packet_disconnect_room_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_disconnect_room_ntf)
}

void packet_disconnect_room_ntf::SharedCtor() {
  _cached_size_ = 0;
  room_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_disconnect_room_ntf::~packet_disconnect_room_ntf() {
  // @@protoc_insertion_point(destructor:logic_server.packet_disconnect_room_ntf)
  SharedDtor();
}

void packet_disconnect_room_ntf::SharedDtor() {
  room_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_disconnect_room_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_disconnect_room_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_disconnect_room_ntf_descriptor_;
}

const packet_disconnect_room_ntf& packet_disconnect_room_ntf::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_disconnect_room_ntf> packet_disconnect_room_ntf_default_instance_;

packet_disconnect_room_ntf* packet_disconnect_room_ntf::New(::google::protobuf::Arena* arena) const {
  packet_disconnect_room_ntf* n = new packet_disconnect_room_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_disconnect_room_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_disconnect_room_ntf)
  if (has_room_key()) {
    room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_disconnect_room_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_disconnect_room_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_key().data(), this->room_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logic_server.packet_disconnect_room_ntf.room_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_disconnect_room_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_disconnect_room_ntf)
  return false;
#undef DO_
}

void packet_disconnect_room_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_disconnect_room_ntf)
  // required string room_key = 1;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_disconnect_room_ntf.room_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_disconnect_room_ntf)
}

::google::protobuf::uint8* packet_disconnect_room_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_disconnect_room_ntf)
  // required string room_key = 1;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_disconnect_room_ntf.room_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_disconnect_room_ntf)
  return target;
}

size_t packet_disconnect_room_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_disconnect_room_ntf)
  size_t total_size = 0;

  // required string room_key = 1;
  if (has_room_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_disconnect_room_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_disconnect_room_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_disconnect_room_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_disconnect_room_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_disconnect_room_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_disconnect_room_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_disconnect_room_ntf::MergeFrom(const packet_disconnect_room_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_disconnect_room_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_disconnect_room_ntf::UnsafeMergeFrom(const packet_disconnect_room_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_key()) {
      set_has_room_key();
      room_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_disconnect_room_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_disconnect_room_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_disconnect_room_ntf::CopyFrom(const packet_disconnect_room_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_disconnect_room_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_disconnect_room_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_disconnect_room_ntf::Swap(packet_disconnect_room_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_disconnect_room_ntf::InternalSwap(packet_disconnect_room_ntf* other) {
  room_key_.Swap(&other->room_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_disconnect_room_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_disconnect_room_ntf_descriptor_;
  metadata.reflection = packet_disconnect_room_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_disconnect_room_ntf

// required string room_key = 1;
bool packet_disconnect_room_ntf::has_room_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_disconnect_room_ntf::set_has_room_key() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_disconnect_room_ntf::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_disconnect_room_ntf::clear_room_key() {
  room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_key();
}
const ::std::string& packet_disconnect_room_ntf::room_key() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_disconnect_room_ntf.room_key)
  return room_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_disconnect_room_ntf::set_room_key(const ::std::string& value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logic_server.packet_disconnect_room_ntf.room_key)
}
void packet_disconnect_room_ntf::set_room_key(const char* value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logic_server.packet_disconnect_room_ntf.room_key)
}
void packet_disconnect_room_ntf::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logic_server.packet_disconnect_room_ntf.room_key)
}
::std::string* packet_disconnect_room_ntf::mutable_room_key() {
  set_has_room_key();
  // @@protoc_insertion_point(field_mutable:logic_server.packet_disconnect_room_ntf.room_key)
  return room_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_disconnect_room_ntf::release_room_key() {
  // @@protoc_insertion_point(field_release:logic_server.packet_disconnect_room_ntf.room_key)
  clear_has_room_key();
  return room_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_disconnect_room_ntf::set_allocated_room_key(::std::string* room_key) {
  if (room_key != NULL) {
    set_has_room_key();
  } else {
    clear_has_room_key();
  }
  room_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_key);
  // @@protoc_insertion_point(field_set_allocated:logic_server.packet_disconnect_room_ntf.room_key)
}

inline const packet_disconnect_room_ntf* packet_disconnect_room_ntf::internal_default_instance() {
  return &packet_disconnect_room_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_echo_ntf::kStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_echo_ntf::packet_echo_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_logic_5fserver_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:logic_server.packet_echo_ntf)
}

void packet_echo_ntf::InitAsDefaultInstance() {
}

packet_echo_ntf::packet_echo_ntf(const packet_echo_ntf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logic_server.packet_echo_ntf)
}

void packet_echo_ntf::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

packet_echo_ntf::~packet_echo_ntf() {
  // @@protoc_insertion_point(destructor:logic_server.packet_echo_ntf)
  SharedDtor();
}

void packet_echo_ntf::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void packet_echo_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_echo_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_echo_ntf_descriptor_;
}

const packet_echo_ntf& packet_echo_ntf::default_instance() {
  protobuf_InitDefaults_logic_5fserver_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<packet_echo_ntf> packet_echo_ntf_default_instance_;

packet_echo_ntf* packet_echo_ntf::New(::google::protobuf::Arena* arena) const {
  packet_echo_ntf* n = new packet_echo_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_echo_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:logic_server.packet_echo_ntf)
  if (has_str()) {
    str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_echo_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logic_server.packet_echo_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logic_server.packet_echo_ntf.str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logic_server.packet_echo_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logic_server.packet_echo_ntf)
  return false;
#undef DO_
}

void packet_echo_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logic_server.packet_echo_ntf)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_echo_ntf.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logic_server.packet_echo_ntf)
}

::google::protobuf::uint8* packet_echo_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logic_server.packet_echo_ntf)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logic_server.packet_echo_ntf.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logic_server.packet_echo_ntf)
  return target;
}

size_t packet_echo_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logic_server.packet_echo_ntf)
  size_t total_size = 0;

  // required string str = 1;
  if (has_str()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_echo_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logic_server.packet_echo_ntf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const packet_echo_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_echo_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logic_server.packet_echo_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logic_server.packet_echo_ntf)
    UnsafeMergeFrom(*source);
  }
}

void packet_echo_ntf::MergeFrom(const packet_echo_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logic_server.packet_echo_ntf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void packet_echo_ntf::UnsafeMergeFrom(const packet_echo_ntf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void packet_echo_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logic_server.packet_echo_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_echo_ntf::CopyFrom(const packet_echo_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logic_server.packet_echo_ntf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool packet_echo_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void packet_echo_ntf::Swap(packet_echo_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_echo_ntf::InternalSwap(packet_echo_ntf* other) {
  str_.Swap(&other->str_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_echo_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_echo_ntf_descriptor_;
  metadata.reflection = packet_echo_ntf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_echo_ntf

// required string str = 1;
bool packet_echo_ntf::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_echo_ntf::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_echo_ntf::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_echo_ntf::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
const ::std::string& packet_echo_ntf::str() const {
  // @@protoc_insertion_point(field_get:logic_server.packet_echo_ntf.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_echo_ntf::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logic_server.packet_echo_ntf.str)
}
void packet_echo_ntf::set_str(const char* value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logic_server.packet_echo_ntf.str)
}
void packet_echo_ntf::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logic_server.packet_echo_ntf.str)
}
::std::string* packet_echo_ntf::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:logic_server.packet_echo_ntf.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* packet_echo_ntf::release_str() {
  // @@protoc_insertion_point(field_release:logic_server.packet_echo_ntf.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void packet_echo_ntf::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:logic_server.packet_echo_ntf.str)
}

inline const packet_echo_ntf* packet_echo_ntf::internal_default_instance() {
  return &packet_echo_ntf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace logic_server

// @@protoc_insertion_point(global_scope)
